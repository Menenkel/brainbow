#!/bin/bash

# üè• Brainbow Health Check
# Run this weekly to ensure everything is working properly

echo "üîç Running Brainbow health check..."
echo ""

# Check .env file exists
if [ ! -f ".env" ]; then
    echo "‚ùå .env file missing!"
    echo "   Create it with your DATABASE_URL, GROQ_API_KEY, and PORT"
    exit 1
fi

echo "‚úÖ .env file exists"

# Check DATABASE_URL is set
if ! grep -q "DATABASE_URL=" .env; then
    echo "‚ùå DATABASE_URL not found in .env"
    exit 1
fi

DATABASE_URL=$(grep "DATABASE_URL=" .env | cut -d'=' -f2-)
if [[ $DATABASE_URL == *"supabase.com"* ]]; then
    echo "‚úÖ Supabase DATABASE_URL configured"
else
    echo "‚ö†Ô∏è  Database URL doesn't appear to be Supabase"
fi

# Check GROQ_API_KEY is set
if grep -q "GROQ_API_KEY=" .env; then
    echo "‚úÖ GROQ_API_KEY configured"
else
    echo "‚ö†Ô∏è  GROQ_API_KEY missing (AI features won't work)"
fi

# Check if server is running
echo ""
echo "üåê Testing server connection..."

if curl -s http://localhost:5002/api/mood > /dev/null; then
    echo "‚úÖ Server responding on port 5002"
    
    # Test database connection by fetching moods
    MOOD_RESPONSE=$(curl -s http://localhost:5002/api/mood)
    if [[ $MOOD_RESPONSE == "["* ]] || [[ $MOOD_RESPONSE == "{"* ]]; then
        MOOD_COUNT=$(echo $MOOD_RESPONSE | jq length 2>/dev/null || echo "unknown")
        echo "‚úÖ Database connection working ($MOOD_COUNT emotions stored)"
    else
        echo "‚ùå Database connection failed"
        echo "   Response: $MOOD_RESPONSE"
        exit 1
    fi
    
    # Test emotion saving
    echo ""
    echo "üß™ Testing emotion saving..."
    SAVE_RESULT=$(curl -s -X POST http://localhost:5002/api/mood \
        -H "Content-Type: application/json" \
        -d '{"mood":"üß™","context":"{\"type\":\"health_check\",\"timestamp\":\"'$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)'\"}"}')
    
    if [[ $SAVE_RESULT == *"id"* ]]; then
        echo "‚úÖ Emotion saving works"
        
        # Clean up test emotion
        echo "üßπ Cleaning up test data..."
        # Note: You might want to add a cleanup endpoint for test data
    else
        echo "‚ùå Emotion saving failed"
        echo "   Response: $SAVE_RESULT"
        exit 1
    fi
    
else
    echo "‚ùå Server not responding on port 5002"
    echo "   Start server with: npm run dev"
    exit 1
fi

# Check Google Calendar status
echo ""
echo "üìÖ Testing Google Calendar integration..."
CAL_STATUS=$(curl -s http://localhost:5002/api/google-calendar/status)
if [[ $CAL_STATUS == *"configured"* ]]; then
    echo "‚úÖ Google Calendar integration active"
else
    echo "‚ö†Ô∏è  Google Calendar not configured (optional)"
fi

# Check weather API
echo ""
echo "üå§Ô∏è  Testing weather service..."
WEATHER_RESPONSE=$(curl -s http://localhost:5002/api/weather)
if [[ $WEATHER_RESPONSE == *"temperature"* ]]; then
    echo "‚úÖ Weather service working"
else
    echo "‚ö†Ô∏è  Weather service not responding"
fi

echo ""
echo "üéâ Health check completed!"
echo ""
echo "üìä System Status Summary:"
echo "   ‚Ä¢ Database: ‚úÖ Connected and working"
echo "   ‚Ä¢ Emotions: ‚úÖ Saving and retrieving"
echo "   ‚Ä¢ Server: ‚úÖ Running on port 5002"
echo "   ‚Ä¢ Google Calendar: $([ "$CAL_STATUS" == *"configured"* ] && echo "‚úÖ Active" || echo "‚ö†Ô∏è Not configured")"
echo "   ‚Ä¢ Weather: $([ "$WEATHER_RESPONSE" == *"temperature"* ] && echo "‚úÖ Working" || echo "‚ö†Ô∏è Issues detected")"
echo ""
echo "üí° Recommendations:"
echo "   ‚Ä¢ Run this check weekly"
echo "   ‚Ä¢ Backup data monthly with: ./backup-data.sh"
echo "   ‚Ä¢ Monitor Supabase dashboard monthly"
echo ""
echo "Next health check recommended: $(date -d '+1 week' '+%B %d, %Y')" 